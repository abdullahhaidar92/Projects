
Grammar
rule 1    start -> code
rule 2    code -> line code
rule 3    code ->		/* empty */
rule 4    line -> stmt
rule 5    line -> openStmt
rule 6    stmt -> simpleStmt
rule 7    stmt -> whileLoop
rule 8    stmt -> forLoop
rule 9    stmt -> ifStmt
rule 10   stmt -> '{' code '}'
rule 11   openStmt -> openIfStmt
rule 12   openStmt -> openWhileLoop
rule 13   openStmt -> openForLoop
rule 14   simpleStmt -> type variables ';'
rule 15   simpleStmt -> PRINT '(' TEXT args ')' ';'
rule 16   simpleStmt -> SCAN '(' TEXT addresses ')' ';'
rule 17   simpleStmt -> arithmaticExpression ';'
rule 18   simpleStmt -> assignment ';'
rule 19   ifStmt -> IF '(' logicExpression ')' stmt ELSE stmt
rule 20   openIfStmt -> IF '(' logicExpression ')' stmt ELSE openIfStmt
rule 21   openIfStmt -> IF '(' logicExpression ')' line
rule 22   arithmaticExpression -> arithmaticExpression '+' term
rule 23   arithmaticExpression -> arithmaticExpression '-' term
rule 24   arithmaticExpression -> term
rule 25   term -> term '*' factor
rule 26   term -> term '/' factor
rule 27   term -> term '%' factor
rule 28   term -> factor
rule 29   factor -> '(' arithmaticExpression ')'
rule 30   factor -> ID
rule 31   factor -> '-' ID
rule 32   factor -> value
rule 33   logicExpression -> logicExpression OR logicTerm
rule 34   logicExpression -> logicTerm
rule 35   logicTerm -> logicTerm AND logicFactor
rule 36   logicTerm -> logicFactor
rule 37   logicFactor -> '!' logicFactor
rule 38   logicFactor -> notFactor
rule 39   notFactor -> '(' logicExpression ')'
rule 40   notFactor -> comparator
rule 41   comparator -> arithmaticExpression comparisonOperator arithmaticExpression
rule 42   comparisonOperator -> EQ
rule 43   comparisonOperator -> '>'
rule 44   comparisonOperator -> '<'
rule 45   comparisonOperator -> LE
rule 46   comparisonOperator -> GE
rule 47   assignment -> ID assignementOperation arithmaticExpression
rule 48   assignment -> ID INC
rule 49   assignment -> ID DEC
rule 50   assignementOperation -> '='
rule 51   assignementOperation -> ADD
rule 52   assignementOperation -> SUB
rule 53   assignementOperation -> MUL
rule 54   assignementOperation -> DIV
rule 55   whileLoop -> WHILE '(' logicExpression ')' stmt
rule 56   forLoop -> forExpr stmt
rule 57   openForLoop -> forExpr openStmt
rule 58   forExpr -> FOR initExpr boundExpr stepExpr
rule 59   initExpr -> '(' ID '=' arithmaticExpression ';'
rule 60   boundExpr -> ID LE arithmaticExpression ';'
rule 61   boundExpr -> ID GE arithmaticExpression ';'
rule 62   boundExpr -> ID '<' arithmaticExpression ';'
rule 63   boundExpr -> ID '>' arithmaticExpression ';'
rule 64   stepExpr -> ID ADD arithmaticExpression ')'
rule 65   stepExpr -> ID SUB arithmaticExpression ')'
rule 66   stepExpr -> ID INC ')'
rule 67   stepExpr -> ID DEC ')'
rule 68   openWhileLoop -> WHILE '(' logicExpression ')' openStmt
rule 69   variables -> ID list
rule 70   variables -> ID '=' value list
rule 71   list -> ',' variables
rule 72   list ->		/* empty */
rule 73   type -> INTEGER
rule 74   type -> CHAR
rule 75   type -> SINGLE
rule 76   type -> DOUBLE
rule 77   value -> CHARVALUE
rule 78   value -> numberValue
rule 79   value -> '-' numberValue
rule 80   numberValue -> INTEGERVALUE
rule 81   numberValue -> SINGLEVALUE
rule 82   numberValue -> DOUBLEVALUE
rule 83   args -> ',' ID args
rule 84   args ->		/* empty */
rule 85   addresses -> ',' '&' ID addresses
rule 86   addresses ->		/* empty */

Terminals, with rules where they appear

$ (-1)
'!' (33) 37
'%' (37) 27
'&' (38) 85
'(' (40) 15 16 19 20 21 29 39 55 59 68
')' (41) 15 16 19 20 21 29 39 55 64 65 66 67 68
'*' (42) 25
'+' (43) 22
',' (44) 71 83 85
'-' (45) 23 31 79
'/' (47) 26
';' (59) 14 15 16 17 18 59 60 61 62 63
'<' (60) 44 62
'=' (61) 50 59 70
'>' (62) 43 63
'{' (123) 10
'}' (125) 10
error (256)
INTEGER (258) 73
CHAR (259) 74
SINGLE (260) 75
DOUBLE (261) 76
ID (262) 30 31 47 48 49 59 60 61 62 63 64 65 66 67 69 70 83 85
INTEGERVALUE (263) 80
CHARVALUE (264) 77
SINGLEVALUE (265) 81
DOUBLEVALUE (266) 82
PRINT (267) 15
SCAN (268) 16
TEXT (269) 15 16
IF (270) 19 20 21
ELSE (271) 19 20
EQ (272) 42
LE (273) 45 60
GE (274) 46 61
AND (275) 35
OR (276) 33
ADD (277) 51 64
SUB (278) 52 65
MUL (279) 53
DIV (280) 54
INC (281) 48 66
DEC (282) 49 67
WHILE (283) 55 68
FOR (284) 58

Nonterminals, with rules where they appear

start (46)
    on left: 1
code (47)
    on left: 2 3, on right: 1 2 10
line (48)
    on left: 4 5, on right: 2 21
stmt (49)
    on left: 6 7 8 9 10, on right: 4 19 20 55 56
openStmt (50)
    on left: 11 12 13, on right: 5 57 68
simpleStmt (51)
    on left: 14 15 16 17 18, on right: 6
ifStmt (52)
    on left: 19, on right: 9
openIfStmt (53)
    on left: 20 21, on right: 11 20
arithmaticExpression (54)
    on left: 22 23 24, on right: 17 22 23 29 41 47 59 60 61 62 63 64
    65
term (55)
    on left: 25 26 27 28, on right: 22 23 24 25 26 27
factor (56)
    on left: 29 30 31 32, on right: 25 26 27 28
logicExpression (57)
    on left: 33 34, on right: 19 20 21 33 39 55 68
logicTerm (58)
    on left: 35 36, on right: 33 34 35
logicFactor (59)
    on left: 37 38, on right: 35 36 37
notFactor (60)
    on left: 39 40, on right: 38
comparator (61)
    on left: 41, on right: 40
comparisonOperator (62)
    on left: 42 43 44 45 46, on right: 41
assignment (63)
    on left: 47 48 49, on right: 18
assignementOperation (64)
    on left: 50 51 52 53 54, on right: 47
whileLoop (65)
    on left: 55, on right: 7
forLoop (66)
    on left: 56, on right: 8
openForLoop (67)
    on left: 57, on right: 13
forExpr (68)
    on left: 58, on right: 56 57
initExpr (69)
    on left: 59, on right: 58
boundExpr (70)
    on left: 60 61 62 63, on right: 58
stepExpr (71)
    on left: 64 65 66 67, on right: 58
openWhileLoop (72)
    on left: 68, on right: 12
variables (73)
    on left: 69 70, on right: 14 71
list (74)
    on left: 71 72, on right: 69 70
type (75)
    on left: 73 74 75 76, on right: 14
value (76)
    on left: 77 78 79, on right: 32 70
numberValue (77)
    on left: 80 81 82, on right: 78 79
args (78)
    on left: 83 84, on right: 15 83
addresses (79)
    on left: 85 86, on right: 16 85


state 0

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 14
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    $default	reduce using rule 3 (code)

    start	go to state 173
    code	go to state 18
    line	go to state 19
    stmt	go to state 20
    openStmt	go to state 21
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 24
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    openForLoop	go to state 31
    forExpr	go to state 32
    openWhileLoop	go to state 33
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 1

    type  ->  INTEGER .   (rule 73)

    $default	reduce using rule 73 (type)



state 2

    type  ->  CHAR .   (rule 74)

    $default	reduce using rule 74 (type)



state 3

    type  ->  SINGLE .   (rule 75)

    $default	reduce using rule 75 (type)



state 4

    type  ->  DOUBLE .   (rule 76)

    $default	reduce using rule 76 (type)



state 5

    factor  ->  ID .   (rule 30)
    assignment  ->  ID . assignementOperation arithmaticExpression   (rule 47)
    assignment  ->  ID . INC   (rule 48)
    assignment  ->  ID . DEC   (rule 49)

    ADD 	shift, and go to state 37
    SUB 	shift, and go to state 38
    MUL 	shift, and go to state 39
    DIV 	shift, and go to state 40
    INC 	shift, and go to state 41
    DEC 	shift, and go to state 42
    '=' 	shift, and go to state 43

    $default	reduce using rule 30 (factor)

    assignementOperation	go to state 44



state 6

    numberValue  ->  INTEGERVALUE .   (rule 80)

    $default	reduce using rule 80 (numberValue)



state 7

    value  ->  CHARVALUE .   (rule 77)

    $default	reduce using rule 77 (value)



state 8

    numberValue  ->  SINGLEVALUE .   (rule 81)

    $default	reduce using rule 81 (numberValue)



state 9

    numberValue  ->  DOUBLEVALUE .   (rule 82)

    $default	reduce using rule 82 (numberValue)



state 10

    simpleStmt  ->  PRINT . '(' TEXT args ')' ';'   (rule 15)

    '(' 	shift, and go to state 45



state 11

    simpleStmt  ->  SCAN . '(' TEXT addresses ')' ';'   (rule 16)

    '(' 	shift, and go to state 46



state 12

    factor  ->  '(' . arithmaticExpression ')'   (rule 29)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 48
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 13

    ifStmt  ->  IF . '(' logicExpression ')' stmt ELSE stmt   (rule 19)
    openIfStmt  ->  IF . '(' logicExpression ')' stmt ELSE openIfStmt   (rule 20)
    openIfStmt  ->  IF . '(' logicExpression ')' line   (rule 21)

    '(' 	shift, and go to state 49



state 14

    whileLoop  ->  WHILE . '(' logicExpression ')' stmt   (rule 55)
    openWhileLoop  ->  WHILE . '(' logicExpression ')' openStmt   (rule 68)

    '(' 	shift, and go to state 50



state 15

    forExpr  ->  FOR . initExpr boundExpr stepExpr   (rule 58)

    '(' 	shift, and go to state 51

    initExpr	go to state 52



state 16

    stmt  ->  '{' . code '}'   (rule 10)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 14
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    $default	reduce using rule 3 (code)

    code	go to state 53
    line	go to state 19
    stmt	go to state 20
    openStmt	go to state 21
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 24
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    openForLoop	go to state 31
    forExpr	go to state 32
    openWhileLoop	go to state 33
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 17

    factor  ->  '-' . ID   (rule 31)
    value  ->  '-' . numberValue   (rule 79)

    ID  	shift, and go to state 54
    INTEGERVALUE	shift, and go to state 6
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9

    numberValue	go to state 55



state 18

    start  ->  code .   (rule 1)

    $default	reduce using rule 1 (start)



state 19

    code  ->  line . code   (rule 2)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 14
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    $default	reduce using rule 3 (code)

    code	go to state 56
    line	go to state 19
    stmt	go to state 20
    openStmt	go to state 21
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 24
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    openForLoop	go to state 31
    forExpr	go to state 32
    openWhileLoop	go to state 33
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 20

    line  ->  stmt .   (rule 4)

    $default	reduce using rule 4 (line)



state 21

    line  ->  openStmt .   (rule 5)

    $default	reduce using rule 5 (line)



state 22

    stmt  ->  simpleStmt .   (rule 6)

    $default	reduce using rule 6 (stmt)



state 23

    stmt  ->  ifStmt .   (rule 9)

    $default	reduce using rule 9 (stmt)



state 24

    openStmt  ->  openIfStmt .   (rule 11)

    $default	reduce using rule 11 (openStmt)



state 25

    simpleStmt  ->  arithmaticExpression . ';'   (rule 17)
    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)

    ';' 	shift, and go to state 57
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 26

    arithmaticExpression  ->  term .   (rule 24)
    term  ->  term . '*' factor   (rule 25)
    term  ->  term . '/' factor   (rule 26)
    term  ->  term . '%' factor   (rule 27)

    '*' 	shift, and go to state 60
    '/' 	shift, and go to state 61
    '%' 	shift, and go to state 62

    $default	reduce using rule 24 (arithmaticExpression)



state 27

    term  ->  factor .   (rule 28)

    $default	reduce using rule 28 (term)



state 28

    simpleStmt  ->  assignment . ';'   (rule 18)

    ';' 	shift, and go to state 63



state 29

    stmt  ->  whileLoop .   (rule 7)

    $default	reduce using rule 7 (stmt)



state 30

    stmt  ->  forLoop .   (rule 8)

    $default	reduce using rule 8 (stmt)



state 31

    openStmt  ->  openForLoop .   (rule 13)

    $default	reduce using rule 13 (openStmt)



state 32

    forLoop  ->  forExpr . stmt   (rule 56)
    openForLoop  ->  forExpr . openStmt   (rule 57)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 14
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 64
    openStmt	go to state 65
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 24
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    openForLoop	go to state 31
    forExpr	go to state 32
    openWhileLoop	go to state 33
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 33

    openStmt  ->  openWhileLoop .   (rule 12)

    $default	reduce using rule 12 (openStmt)



state 34

    simpleStmt  ->  type . variables ';'   (rule 14)

    ID  	shift, and go to state 66

    variables	go to state 67



state 35

    factor  ->  value .   (rule 32)

    $default	reduce using rule 32 (factor)



state 36

    value  ->  numberValue .   (rule 78)

    $default	reduce using rule 78 (value)



state 37

    assignementOperation  ->  ADD .   (rule 51)

    $default	reduce using rule 51 (assignementOperation)



state 38

    assignementOperation  ->  SUB .   (rule 52)

    $default	reduce using rule 52 (assignementOperation)



state 39

    assignementOperation  ->  MUL .   (rule 53)

    $default	reduce using rule 53 (assignementOperation)



state 40

    assignementOperation  ->  DIV .   (rule 54)

    $default	reduce using rule 54 (assignementOperation)



state 41

    assignment  ->  ID INC .   (rule 48)

    $default	reduce using rule 48 (assignment)



state 42

    assignment  ->  ID DEC .   (rule 49)

    $default	reduce using rule 49 (assignment)



state 43

    assignementOperation  ->  '=' .   (rule 50)

    $default	reduce using rule 50 (assignementOperation)



state 44

    assignment  ->  ID assignementOperation . arithmaticExpression   (rule 47)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 68
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 45

    simpleStmt  ->  PRINT '(' . TEXT args ')' ';'   (rule 15)

    TEXT	shift, and go to state 69



state 46

    simpleStmt  ->  SCAN '(' . TEXT addresses ')' ';'   (rule 16)

    TEXT	shift, and go to state 70



state 47

    factor  ->  ID .   (rule 30)

    $default	reduce using rule 30 (factor)



state 48

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    factor  ->  '(' arithmaticExpression . ')'   (rule 29)

    ')' 	shift, and go to state 71
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 49

    ifStmt  ->  IF '(' . logicExpression ')' stmt ELSE stmt   (rule 19)
    openIfStmt  ->  IF '(' . logicExpression ')' stmt ELSE openIfStmt   (rule 20)
    openIfStmt  ->  IF '(' . logicExpression ')' line   (rule 21)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicExpression	go to state 75
    logicTerm	go to state 76
    logicFactor	go to state 77
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 50

    whileLoop  ->  WHILE '(' . logicExpression ')' stmt   (rule 55)
    openWhileLoop  ->  WHILE '(' . logicExpression ')' openStmt   (rule 68)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicExpression	go to state 80
    logicTerm	go to state 76
    logicFactor	go to state 77
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 51

    initExpr  ->  '(' . ID '=' arithmaticExpression ';'   (rule 59)

    ID  	shift, and go to state 81



state 52

    forExpr  ->  FOR initExpr . boundExpr stepExpr   (rule 58)

    ID  	shift, and go to state 82

    boundExpr	go to state 83



state 53

    stmt  ->  '{' code . '}'   (rule 10)

    '}' 	shift, and go to state 84



state 54

    factor  ->  '-' ID .   (rule 31)

    $default	reduce using rule 31 (factor)



state 55

    value  ->  '-' numberValue .   (rule 79)

    $default	reduce using rule 79 (value)



state 56

    code  ->  line code .   (rule 2)

    $default	reduce using rule 2 (code)



state 57

    simpleStmt  ->  arithmaticExpression ';' .   (rule 17)

    $default	reduce using rule 17 (simpleStmt)



state 58

    arithmaticExpression  ->  arithmaticExpression '+' . term   (rule 22)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    term	go to state 85
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 59

    arithmaticExpression  ->  arithmaticExpression '-' . term   (rule 23)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    term	go to state 86
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 60

    term  ->  term '*' . factor   (rule 25)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    factor	go to state 87
    value	go to state 35
    numberValue	go to state 36



state 61

    term  ->  term '/' . factor   (rule 26)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    factor	go to state 88
    value	go to state 35
    numberValue	go to state 36



state 62

    term  ->  term '%' . factor   (rule 27)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    factor	go to state 89
    value	go to state 35
    numberValue	go to state 36



state 63

    simpleStmt  ->  assignment ';' .   (rule 18)

    $default	reduce using rule 18 (simpleStmt)



state 64

    forLoop  ->  forExpr stmt .   (rule 56)

    $default	reduce using rule 56 (forLoop)



state 65

    openForLoop  ->  forExpr openStmt .   (rule 57)

    $default	reduce using rule 57 (openForLoop)



state 66

    variables  ->  ID . list   (rule 69)
    variables  ->  ID . '=' value list   (rule 70)

    '=' 	shift, and go to state 90
    ',' 	shift, and go to state 91

    $default	reduce using rule 72 (list)

    list	go to state 92



state 67

    simpleStmt  ->  type variables . ';'   (rule 14)

    ';' 	shift, and go to state 93



state 68

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    assignment  ->  ID assignementOperation arithmaticExpression .   (rule 47)

    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59

    $default	reduce using rule 47 (assignment)



state 69

    simpleStmt  ->  PRINT '(' TEXT . args ')' ';'   (rule 15)

    ',' 	shift, and go to state 94

    $default	reduce using rule 84 (args)

    args	go to state 95



state 70

    simpleStmt  ->  SCAN '(' TEXT . addresses ')' ';'   (rule 16)

    ',' 	shift, and go to state 96

    $default	reduce using rule 86 (addresses)

    addresses	go to state 97



state 71

    factor  ->  '(' arithmaticExpression ')' .   (rule 29)

    $default	reduce using rule 29 (factor)



state 72

    factor  ->  '(' . arithmaticExpression ')'   (rule 29)
    notFactor  ->  '(' . logicExpression ')'   (rule 39)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 98
    term	go to state 26
    factor	go to state 27
    logicExpression	go to state 99
    logicTerm	go to state 76
    logicFactor	go to state 77
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 73

    logicFactor  ->  '!' . logicFactor   (rule 37)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicFactor	go to state 100
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 74

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    comparator  ->  arithmaticExpression . comparisonOperator arithmaticExpression   (rule 41)

    EQ  	shift, and go to state 101
    LE  	shift, and go to state 102
    GE  	shift, and go to state 103
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59
    '>' 	shift, and go to state 104
    '<' 	shift, and go to state 105

    comparisonOperator	go to state 106



state 75

    ifStmt  ->  IF '(' logicExpression . ')' stmt ELSE stmt   (rule 19)
    openIfStmt  ->  IF '(' logicExpression . ')' stmt ELSE openIfStmt   (rule 20)
    openIfStmt  ->  IF '(' logicExpression . ')' line   (rule 21)
    logicExpression  ->  logicExpression . OR logicTerm   (rule 33)

    ')' 	shift, and go to state 107
    OR  	shift, and go to state 108



state 76

    logicExpression  ->  logicTerm .   (rule 34)
    logicTerm  ->  logicTerm . AND logicFactor   (rule 35)

    AND 	shift, and go to state 109

    $default	reduce using rule 34 (logicExpression)



state 77

    logicTerm  ->  logicFactor .   (rule 36)

    $default	reduce using rule 36 (logicTerm)



state 78

    logicFactor  ->  notFactor .   (rule 38)

    $default	reduce using rule 38 (logicFactor)



state 79

    notFactor  ->  comparator .   (rule 40)

    $default	reduce using rule 40 (notFactor)



state 80

    logicExpression  ->  logicExpression . OR logicTerm   (rule 33)
    whileLoop  ->  WHILE '(' logicExpression . ')' stmt   (rule 55)
    openWhileLoop  ->  WHILE '(' logicExpression . ')' openStmt   (rule 68)

    ')' 	shift, and go to state 110
    OR  	shift, and go to state 108



state 81

    initExpr  ->  '(' ID . '=' arithmaticExpression ';'   (rule 59)

    '=' 	shift, and go to state 111



state 82

    boundExpr  ->  ID . LE arithmaticExpression ';'   (rule 60)
    boundExpr  ->  ID . GE arithmaticExpression ';'   (rule 61)
    boundExpr  ->  ID . '<' arithmaticExpression ';'   (rule 62)
    boundExpr  ->  ID . '>' arithmaticExpression ';'   (rule 63)

    LE  	shift, and go to state 112
    GE  	shift, and go to state 113
    '>' 	shift, and go to state 114
    '<' 	shift, and go to state 115



state 83

    forExpr  ->  FOR initExpr boundExpr . stepExpr   (rule 58)

    ID  	shift, and go to state 116

    stepExpr	go to state 117



state 84

    stmt  ->  '{' code '}' .   (rule 10)

    $default	reduce using rule 10 (stmt)



state 85

    arithmaticExpression  ->  arithmaticExpression '+' term .   (rule 22)
    term  ->  term . '*' factor   (rule 25)
    term  ->  term . '/' factor   (rule 26)
    term  ->  term . '%' factor   (rule 27)

    '*' 	shift, and go to state 60
    '/' 	shift, and go to state 61
    '%' 	shift, and go to state 62

    $default	reduce using rule 22 (arithmaticExpression)



state 86

    arithmaticExpression  ->  arithmaticExpression '-' term .   (rule 23)
    term  ->  term . '*' factor   (rule 25)
    term  ->  term . '/' factor   (rule 26)
    term  ->  term . '%' factor   (rule 27)

    '*' 	shift, and go to state 60
    '/' 	shift, and go to state 61
    '%' 	shift, and go to state 62

    $default	reduce using rule 23 (arithmaticExpression)



state 87

    term  ->  term '*' factor .   (rule 25)

    $default	reduce using rule 25 (term)



state 88

    term  ->  term '/' factor .   (rule 26)

    $default	reduce using rule 26 (term)



state 89

    term  ->  term '%' factor .   (rule 27)

    $default	reduce using rule 27 (term)



state 90

    variables  ->  ID '=' . value list   (rule 70)

    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '-' 	shift, and go to state 118

    value	go to state 119
    numberValue	go to state 36



state 91

    list  ->  ',' . variables   (rule 71)

    ID  	shift, and go to state 66

    variables	go to state 120



state 92

    variables  ->  ID list .   (rule 69)

    $default	reduce using rule 69 (variables)



state 93

    simpleStmt  ->  type variables ';' .   (rule 14)

    $default	reduce using rule 14 (simpleStmt)



state 94

    args  ->  ',' . ID args   (rule 83)

    ID  	shift, and go to state 121



state 95

    simpleStmt  ->  PRINT '(' TEXT args . ')' ';'   (rule 15)

    ')' 	shift, and go to state 122



state 96

    addresses  ->  ',' . '&' ID addresses   (rule 85)

    '&' 	shift, and go to state 123



state 97

    simpleStmt  ->  SCAN '(' TEXT addresses . ')' ';'   (rule 16)

    ')' 	shift, and go to state 124



state 98

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    factor  ->  '(' arithmaticExpression . ')'   (rule 29)
    comparator  ->  arithmaticExpression . comparisonOperator arithmaticExpression   (rule 41)

    ')' 	shift, and go to state 71
    EQ  	shift, and go to state 101
    LE  	shift, and go to state 102
    GE  	shift, and go to state 103
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59
    '>' 	shift, and go to state 104
    '<' 	shift, and go to state 105

    comparisonOperator	go to state 106



state 99

    logicExpression  ->  logicExpression . OR logicTerm   (rule 33)
    notFactor  ->  '(' logicExpression . ')'   (rule 39)

    ')' 	shift, and go to state 125
    OR  	shift, and go to state 108



state 100

    logicFactor  ->  '!' logicFactor .   (rule 37)

    $default	reduce using rule 37 (logicFactor)



state 101

    comparisonOperator  ->  EQ .   (rule 42)

    $default	reduce using rule 42 (comparisonOperator)



state 102

    comparisonOperator  ->  LE .   (rule 45)

    $default	reduce using rule 45 (comparisonOperator)



state 103

    comparisonOperator  ->  GE .   (rule 46)

    $default	reduce using rule 46 (comparisonOperator)



state 104

    comparisonOperator  ->  '>' .   (rule 43)

    $default	reduce using rule 43 (comparisonOperator)



state 105

    comparisonOperator  ->  '<' .   (rule 44)

    $default	reduce using rule 44 (comparisonOperator)



state 106

    comparator  ->  arithmaticExpression comparisonOperator . arithmaticExpression   (rule 41)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 126
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 107

    ifStmt  ->  IF '(' logicExpression ')' . stmt ELSE stmt   (rule 19)
    openIfStmt  ->  IF '(' logicExpression ')' . stmt ELSE openIfStmt   (rule 20)
    openIfStmt  ->  IF '(' logicExpression ')' . line   (rule 21)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 14
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    line	go to state 127
    stmt	go to state 128
    openStmt	go to state 21
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 24
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    openForLoop	go to state 31
    forExpr	go to state 32
    openWhileLoop	go to state 33
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 108

    logicExpression  ->  logicExpression OR . logicTerm   (rule 33)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicTerm	go to state 129
    logicFactor	go to state 77
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 109

    logicTerm  ->  logicTerm AND . logicFactor   (rule 35)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicFactor	go to state 130
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 110

    whileLoop  ->  WHILE '(' logicExpression ')' . stmt   (rule 55)
    openWhileLoop  ->  WHILE '(' logicExpression ')' . openStmt   (rule 68)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 14
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 131
    openStmt	go to state 132
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 24
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    openForLoop	go to state 31
    forExpr	go to state 32
    openWhileLoop	go to state 33
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 111

    initExpr  ->  '(' ID '=' . arithmaticExpression ';'   (rule 59)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 133
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 112

    boundExpr  ->  ID LE . arithmaticExpression ';'   (rule 60)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 134
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 113

    boundExpr  ->  ID GE . arithmaticExpression ';'   (rule 61)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 135
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 114

    boundExpr  ->  ID '>' . arithmaticExpression ';'   (rule 63)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 136
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 115

    boundExpr  ->  ID '<' . arithmaticExpression ';'   (rule 62)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 137
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 116

    stepExpr  ->  ID . ADD arithmaticExpression ')'   (rule 64)
    stepExpr  ->  ID . SUB arithmaticExpression ')'   (rule 65)
    stepExpr  ->  ID . INC ')'   (rule 66)
    stepExpr  ->  ID . DEC ')'   (rule 67)

    ADD 	shift, and go to state 138
    SUB 	shift, and go to state 139
    INC 	shift, and go to state 140
    DEC 	shift, and go to state 141



state 117

    forExpr  ->  FOR initExpr boundExpr stepExpr .   (rule 58)

    $default	reduce using rule 58 (forExpr)



state 118

    value  ->  '-' . numberValue   (rule 79)

    INTEGERVALUE	shift, and go to state 6
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9

    numberValue	go to state 55



state 119

    variables  ->  ID '=' value . list   (rule 70)

    ',' 	shift, and go to state 91

    $default	reduce using rule 72 (list)

    list	go to state 142



state 120

    list  ->  ',' variables .   (rule 71)

    $default	reduce using rule 71 (list)



state 121

    args  ->  ',' ID . args   (rule 83)

    ',' 	shift, and go to state 94

    $default	reduce using rule 84 (args)

    args	go to state 143



state 122

    simpleStmt  ->  PRINT '(' TEXT args ')' . ';'   (rule 15)

    ';' 	shift, and go to state 144



state 123

    addresses  ->  ',' '&' . ID addresses   (rule 85)

    ID  	shift, and go to state 145



state 124

    simpleStmt  ->  SCAN '(' TEXT addresses ')' . ';'   (rule 16)

    ';' 	shift, and go to state 146



state 125

    notFactor  ->  '(' logicExpression ')' .   (rule 39)

    $default	reduce using rule 39 (notFactor)



state 126

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    comparator  ->  arithmaticExpression comparisonOperator arithmaticExpression .   (rule 41)

    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59

    $default	reduce using rule 41 (comparator)



state 127

    openIfStmt  ->  IF '(' logicExpression ')' line .   (rule 21)

    $default	reduce using rule 21 (openIfStmt)



state 128

    line  ->  stmt .   (rule 4)
    ifStmt  ->  IF '(' logicExpression ')' stmt . ELSE stmt   (rule 19)
    openIfStmt  ->  IF '(' logicExpression ')' stmt . ELSE openIfStmt   (rule 20)

    ELSE	shift, and go to state 147

    $default	reduce using rule 4 (line)



state 129

    logicExpression  ->  logicExpression OR logicTerm .   (rule 33)
    logicTerm  ->  logicTerm . AND logicFactor   (rule 35)

    AND 	shift, and go to state 109

    $default	reduce using rule 33 (logicExpression)



state 130

    logicTerm  ->  logicTerm AND logicFactor .   (rule 35)

    $default	reduce using rule 35 (logicTerm)



state 131

    whileLoop  ->  WHILE '(' logicExpression ')' stmt .   (rule 55)

    $default	reduce using rule 55 (whileLoop)



state 132

    openWhileLoop  ->  WHILE '(' logicExpression ')' openStmt .   (rule 68)

    $default	reduce using rule 68 (openWhileLoop)



state 133

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    initExpr  ->  '(' ID '=' arithmaticExpression . ';'   (rule 59)

    ';' 	shift, and go to state 148
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 134

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    boundExpr  ->  ID LE arithmaticExpression . ';'   (rule 60)

    ';' 	shift, and go to state 149
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 135

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    boundExpr  ->  ID GE arithmaticExpression . ';'   (rule 61)

    ';' 	shift, and go to state 150
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 136

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    boundExpr  ->  ID '>' arithmaticExpression . ';'   (rule 63)

    ';' 	shift, and go to state 151
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 137

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    boundExpr  ->  ID '<' arithmaticExpression . ';'   (rule 62)

    ';' 	shift, and go to state 152
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 138

    stepExpr  ->  ID ADD . arithmaticExpression ')'   (rule 64)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 153
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 139

    stepExpr  ->  ID SUB . arithmaticExpression ')'   (rule 65)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 12
    '-' 	shift, and go to state 17

    arithmaticExpression	go to state 154
    term	go to state 26
    factor	go to state 27
    value	go to state 35
    numberValue	go to state 36



state 140

    stepExpr  ->  ID INC . ')'   (rule 66)

    ')' 	shift, and go to state 155



state 141

    stepExpr  ->  ID DEC . ')'   (rule 67)

    ')' 	shift, and go to state 156



state 142

    variables  ->  ID '=' value list .   (rule 70)

    $default	reduce using rule 70 (variables)



state 143

    args  ->  ',' ID args .   (rule 83)

    $default	reduce using rule 83 (args)



state 144

    simpleStmt  ->  PRINT '(' TEXT args ')' ';' .   (rule 15)

    $default	reduce using rule 15 (simpleStmt)



state 145

    addresses  ->  ',' '&' ID . addresses   (rule 85)

    ',' 	shift, and go to state 96

    $default	reduce using rule 86 (addresses)

    addresses	go to state 157



state 146

    simpleStmt  ->  SCAN '(' TEXT addresses ')' ';' .   (rule 16)

    $default	reduce using rule 16 (simpleStmt)



state 147

    ifStmt  ->  IF '(' logicExpression ')' stmt ELSE . stmt   (rule 19)
    openIfStmt  ->  IF '(' logicExpression ')' stmt ELSE . openIfStmt   (rule 20)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 13
    WHILE	shift, and go to state 158
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 159
    simpleStmt	go to state 22
    ifStmt	go to state 23
    openIfStmt	go to state 160
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    forExpr	go to state 161
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 148

    initExpr  ->  '(' ID '=' arithmaticExpression ';' .   (rule 59)

    $default	reduce using rule 59 (initExpr)



state 149

    boundExpr  ->  ID LE arithmaticExpression ';' .   (rule 60)

    $default	reduce using rule 60 (boundExpr)



state 150

    boundExpr  ->  ID GE arithmaticExpression ';' .   (rule 61)

    $default	reduce using rule 61 (boundExpr)



state 151

    boundExpr  ->  ID '>' arithmaticExpression ';' .   (rule 63)

    $default	reduce using rule 63 (boundExpr)



state 152

    boundExpr  ->  ID '<' arithmaticExpression ';' .   (rule 62)

    $default	reduce using rule 62 (boundExpr)



state 153

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    stepExpr  ->  ID ADD arithmaticExpression . ')'   (rule 64)

    ')' 	shift, and go to state 162
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 154

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 22)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 23)
    stepExpr  ->  ID SUB arithmaticExpression . ')'   (rule 65)

    ')' 	shift, and go to state 163
    '+' 	shift, and go to state 58
    '-' 	shift, and go to state 59



state 155

    stepExpr  ->  ID INC ')' .   (rule 66)

    $default	reduce using rule 66 (stepExpr)



state 156

    stepExpr  ->  ID DEC ')' .   (rule 67)

    $default	reduce using rule 67 (stepExpr)



state 157

    addresses  ->  ',' '&' ID addresses .   (rule 85)

    $default	reduce using rule 85 (addresses)



state 158

    whileLoop  ->  WHILE . '(' logicExpression ')' stmt   (rule 55)

    '(' 	shift, and go to state 164



state 159

    ifStmt  ->  IF '(' logicExpression ')' stmt ELSE stmt .   (rule 19)

    $default	reduce using rule 19 (ifStmt)



state 160

    openIfStmt  ->  IF '(' logicExpression ')' stmt ELSE openIfStmt .   (rule 20)

    $default	reduce using rule 20 (openIfStmt)



state 161

    forLoop  ->  forExpr . stmt   (rule 56)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 165
    WHILE	shift, and go to state 158
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 64
    simpleStmt	go to state 22
    ifStmt	go to state 23
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    forExpr	go to state 161
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 162

    stepExpr  ->  ID ADD arithmaticExpression ')' .   (rule 64)

    $default	reduce using rule 64 (stepExpr)



state 163

    stepExpr  ->  ID SUB arithmaticExpression ')' .   (rule 65)

    $default	reduce using rule 65 (stepExpr)



state 164

    whileLoop  ->  WHILE '(' . logicExpression ')' stmt   (rule 55)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicExpression	go to state 166
    logicTerm	go to state 76
    logicFactor	go to state 77
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 165

    ifStmt  ->  IF . '(' logicExpression ')' stmt ELSE stmt   (rule 19)

    '(' 	shift, and go to state 167



state 166

    logicExpression  ->  logicExpression . OR logicTerm   (rule 33)
    whileLoop  ->  WHILE '(' logicExpression . ')' stmt   (rule 55)

    ')' 	shift, and go to state 168
    OR  	shift, and go to state 108



state 167

    ifStmt  ->  IF '(' . logicExpression ')' stmt ELSE stmt   (rule 19)

    ID  	shift, and go to state 47
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    '(' 	shift, and go to state 72
    '-' 	shift, and go to state 17
    '!' 	shift, and go to state 73

    arithmaticExpression	go to state 74
    term	go to state 26
    factor	go to state 27
    logicExpression	go to state 169
    logicTerm	go to state 76
    logicFactor	go to state 77
    notFactor	go to state 78
    comparator	go to state 79
    value	go to state 35
    numberValue	go to state 36



state 168

    whileLoop  ->  WHILE '(' logicExpression ')' . stmt   (rule 55)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 165
    WHILE	shift, and go to state 158
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 131
    simpleStmt	go to state 22
    ifStmt	go to state 23
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    forExpr	go to state 161
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 169

    ifStmt  ->  IF '(' logicExpression . ')' stmt ELSE stmt   (rule 19)
    logicExpression  ->  logicExpression . OR logicTerm   (rule 33)

    ')' 	shift, and go to state 170
    OR  	shift, and go to state 108



state 170

    ifStmt  ->  IF '(' logicExpression ')' . stmt ELSE stmt   (rule 19)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 165
    WHILE	shift, and go to state 158
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 171
    simpleStmt	go to state 22
    ifStmt	go to state 23
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    forExpr	go to state 161
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 171

    ifStmt  ->  IF '(' logicExpression ')' stmt . ELSE stmt   (rule 19)

    ELSE	shift, and go to state 172



state 172

    ifStmt  ->  IF '(' logicExpression ')' stmt ELSE . stmt   (rule 19)

    INTEGER	shift, and go to state 1
    CHAR	shift, and go to state 2
    SINGLE	shift, and go to state 3
    DOUBLE	shift, and go to state 4
    ID  	shift, and go to state 5
    INTEGERVALUE	shift, and go to state 6
    CHARVALUE	shift, and go to state 7
    SINGLEVALUE	shift, and go to state 8
    DOUBLEVALUE	shift, and go to state 9
    PRINT	shift, and go to state 10
    SCAN	shift, and go to state 11
    '(' 	shift, and go to state 12
    IF  	shift, and go to state 165
    WHILE	shift, and go to state 158
    FOR 	shift, and go to state 15
    '{' 	shift, and go to state 16
    '-' 	shift, and go to state 17

    stmt	go to state 159
    simpleStmt	go to state 22
    ifStmt	go to state 23
    arithmaticExpression	go to state 25
    term	go to state 26
    factor	go to state 27
    assignment	go to state 28
    whileLoop	go to state 29
    forLoop	go to state 30
    forExpr	go to state 161
    type	go to state 34
    value	go to state 35
    numberValue	go to state 36



state 173

    $   	go to state 174



state 174

    $   	go to state 175



state 175

    $default	accept
