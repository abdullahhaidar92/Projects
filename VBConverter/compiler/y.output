
Grammar
rule 1    start -> VOID MAIN '(' ')' '{' code '}'
rule 2    code -> line code
rule 3    code ->		/* empty */
rule 4    line -> stmt
rule 5    line -> openStmt
rule 6    stmt -> simpleStmt
rule 7    stmt -> whileLoop
rule 8    stmt -> forLoop
rule 9    stmt -> ifStmt
rule 10   stmt -> '{' code '}'
rule 11   openStmt -> openIfStmt
rule 12   openStmt -> openWhileLoop
rule 13   openStmt -> openForLoop
rule 14   simpleStmt -> declaration ';'
rule 15   simpleStmt -> output ';'
rule 16   simpleStmt -> input ';'
rule 17   simpleStmt -> arithmaticExpression ';'
rule 18   simpleStmt -> assignment ';'
rule 19   declaration -> type varList
rule 20   varList -> varList ',' ID
rule 21   varList -> varList ',' ID '=' arithmaticExpression
rule 22   varList -> ID
rule 23   varList -> ID '=' arithmaticExpression
rule 24   type -> INTEGER
rule 25   type -> CHAR
rule 26   type -> SINGLE
rule 27   type -> DOUBLE
rule 28   output -> PRINT '(' printfExpression ')'
rule 29   printfExpression -> PURESTRING
rule 30   printfExpression -> OPENSTRING stringAndArguments
rule 31   stringAndArguments -> innerString stringAndArguments ',' arithmaticExpression
rule 32   stringAndArguments -> CLOSESTRING ',' arithmaticExpression
rule 33   innerString -> INNERSTRING
rule 34   input -> SCAN '(' OPENSTRING stringAndAddresses ')'
rule 35   stringAndAddresses -> INNERSTRING stringAndAddresses ',' '&' ID
rule 36   stringAndAddresses -> CLOSESTRING ',' '&' ID
rule 37   ifStmt -> IF '(' logicExpression ')' stmt ELSE stmt
rule 38   openIfStmt -> IF '(' logicExpression ')' stmt ELSE openIfStmt
rule 39   openIfStmt -> IF '(' logicExpression ')' line
rule 40   arithmaticExpression -> arithmaticExpression '+' term
rule 41   arithmaticExpression -> arithmaticExpression '-' term
rule 42   arithmaticExpression -> term
rule 43   term -> term '*' factor
rule 44   term -> term '/' factor
rule 45   term -> factor
rule 46   factor -> '(' arithmaticExpression ')'
rule 47   factor -> '-' factor
rule 48   factor -> ID
rule 49   factor -> value
rule 50   logicExpression -> logicExpression OR logicTerm
rule 51   logicExpression -> logicTerm
rule 52   logicTerm -> logicTerm AND logicFactor
rule 53   logicTerm -> logicFactor
rule 54   logicFactor -> '!' logicFactor
rule 55   logicFactor -> notFactor
rule 56   notFactor -> '(' logicExpression ')'
rule 57   notFactor -> comparator
rule 58   comparator -> arithmaticExpression comparisonOperator arithmaticExpression
rule 59   comparisonOperator -> EQ
rule 60   comparisonOperator -> '>'
rule 61   comparisonOperator -> '<'
rule 62   comparisonOperator -> LE
rule 63   comparisonOperator -> GE
rule 64   assignment -> ID assignementOperation arithmaticExpression
rule 65   assignment -> ID INC
rule 66   assignment -> ID DEC
rule 67   assignementOperation -> '='
rule 68   assignementOperation -> ADD
rule 69   assignementOperation -> SUB
rule 70   assignementOperation -> MUL
rule 71   assignementOperation -> DIV
rule 72   whileLoop -> WHILE '(' logicExpression ')' stmt
rule 73   forLoop -> forExpr stmt
rule 74   forExpr -> FOR initExpr boundExpr stepExpr
rule 75   initExpr -> '(' ID '=' arithmaticExpression ';'
rule 76   boundExpr -> ID LE arithmaticExpression ';'
rule 77   boundExpr -> ID GE arithmaticExpression ';'
rule 78   boundExpr -> ID '<' arithmaticExpression ';'
rule 79   boundExpr -> ID '>' arithmaticExpression ';'
rule 80   stepExpr -> ID ADD arithmaticExpression ')'
rule 81   stepExpr -> ID SUB arithmaticExpression ')'
rule 82   stepExpr -> ID INC ')'
rule 83   stepExpr -> ID DEC ')'
rule 84   openForLoop -> forExpr openStmt
rule 85   openWhileLoop -> WHILE '(' logicExpression ')' openStmt
rule 86   value -> CHARVALUE
rule 87   value -> numberValue
rule 88   numberValue -> INTEGERVALUE
rule 89   numberValue -> SINGLEVALUE
rule 90   numberValue -> DOUBLEVALUE

Terminals, with rules where they appear

$ (-1)
'!' (33) 54
'&' (38) 35 36
'(' (40) 1 28 34 37 38 39 46 56 72 75 85
')' (41) 1 28 34 37 38 39 46 56 72 80 81 82 83 85
'*' (42) 43
'+' (43) 40
',' (44) 20 21 31 32 35 36
'-' (45) 41 47
'/' (47) 44
';' (59) 14 15 16 17 18 75 76 77 78 79
'<' (60) 61 78
'=' (61) 21 23 67 75
'>' (62) 60 79
'{' (123) 1 10
'}' (125) 1 10
error (256)
IF (258) 37 38 39
ELSE (259) 37 38
EQ (260) 59
LE (261) 62 76
GE (262) 63 77
AND (263) 52
OR (264) 50
ADD (265) 68 80
SUB (266) 69 81
MUL (267) 70
DIV (268) 71
INC (269) 65 82
DEC (270) 66 83
WHILE (271) 72 85
FOR (272) 74
PRINT (273) 28
SCAN (274) 34
OPENSTRING (275) 30 34
INNERSTRING (276) 33 35
CLOSESTRING (277) 32 36
PURESTRING (278) 29
ID (279) 20 21 22 23 35 36 48 64 65 66 75 76 77 78 79 80 81 82 83
MAIN (280) 1
VOID (281) 1
INTEGER (282) 24
CHAR (283) 25
SINGLE (284) 26
DOUBLE (285) 27
INTEGERVALUE (286) 88
CHARVALUE (287) 86
SINGLEVALUE (288) 89
DOUBLEVALUE (289) 90

Nonterminals, with rules where they appear

start (50)
    on left: 1
code (51)
    on left: 2 3, on right: 1 2 10
line (52)
    on left: 4 5, on right: 2 39
stmt (53)
    on left: 6 7 8 9 10, on right: 4 37 38 72 73
openStmt (54)
    on left: 11 12 13, on right: 5 84 85
simpleStmt (55)
    on left: 14 15 16 17 18, on right: 6
declaration (56)
    on left: 19, on right: 14
varList (57)
    on left: 20 21 22 23, on right: 19 20 21
type (58)
    on left: 24 25 26 27, on right: 19
output (59)
    on left: 28, on right: 15
printfExpression (60)
    on left: 29 30, on right: 28
stringAndArguments (61)
    on left: 31 32, on right: 30 31
innerString (62)
    on left: 33, on right: 31
input (63)
    on left: 34, on right: 16
stringAndAddresses (64)
    on left: 35 36, on right: 34 35
ifStmt (65)
    on left: 37, on right: 9
openIfStmt (66)
    on left: 38 39, on right: 11 38
arithmaticExpression (67)
    on left: 40 41 42, on right: 17 21 23 31 32 40 41 46 58 64 75 76
    77 78 79 80 81
term (68)
    on left: 43 44 45, on right: 40 41 42 43 44
factor (69)
    on left: 46 47 48 49, on right: 43 44 45 47
logicExpression (70)
    on left: 50 51, on right: 37 38 39 50 56 72 85
logicTerm (71)
    on left: 52 53, on right: 50 51 52
logicFactor (72)
    on left: 54 55, on right: 52 53 54
notFactor (73)
    on left: 56 57, on right: 55
comparator (74)
    on left: 58, on right: 57
comparisonOperator (75)
    on left: 59 60 61 62 63, on right: 58
assignment (76)
    on left: 64 65 66, on right: 18
assignementOperation (77)
    on left: 67 68 69 70 71, on right: 64
whileLoop (78)
    on left: 72, on right: 7
forLoop (79)
    on left: 73, on right: 8
forExpr (80)
    on left: 74, on right: 73 84
initExpr (81)
    on left: 75, on right: 74
boundExpr (82)
    on left: 76 77 78 79, on right: 74
stepExpr (83)
    on left: 80 81 82 83, on right: 74
openForLoop (84)
    on left: 84, on right: 13
openWhileLoop (85)
    on left: 85, on right: 12
value (86)
    on left: 86 87, on right: 49
numberValue (87)
    on left: 88 89 90, on right: 87


state 0

    VOID	shift, and go to state 1

    start	go to state 190



state 1

    start  ->  VOID . MAIN '(' ')' '{' code '}'   (rule 1)

    MAIN	shift, and go to state 2



state 2

    start  ->  VOID MAIN . '(' ')' '{' code '}'   (rule 1)

    '(' 	shift, and go to state 3



state 3

    start  ->  VOID MAIN '(' . ')' '{' code '}'   (rule 1)

    ')' 	shift, and go to state 4



state 4

    start  ->  VOID MAIN '(' ')' . '{' code '}'   (rule 1)

    '{' 	shift, and go to state 5



state 5

    start  ->  VOID MAIN '(' ')' '{' . code '}'   (rule 1)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    $default	reduce using rule 3 (code)

    code	go to state 23
    line	go to state 24
    stmt	go to state 25
    openStmt	go to state 26
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 33
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 40
    openForLoop	go to state 41
    openWhileLoop	go to state 42
    value	go to state 43
    numberValue	go to state 44



state 6

    ifStmt  ->  IF . '(' logicExpression ')' stmt ELSE stmt   (rule 37)
    openIfStmt  ->  IF . '(' logicExpression ')' stmt ELSE openIfStmt   (rule 38)
    openIfStmt  ->  IF . '(' logicExpression ')' line   (rule 39)

    '(' 	shift, and go to state 45



state 7

    whileLoop  ->  WHILE . '(' logicExpression ')' stmt   (rule 72)
    openWhileLoop  ->  WHILE . '(' logicExpression ')' openStmt   (rule 85)

    '(' 	shift, and go to state 46



state 8

    forExpr  ->  FOR . initExpr boundExpr stepExpr   (rule 74)

    '(' 	shift, and go to state 47

    initExpr	go to state 48



state 9

    output  ->  PRINT . '(' printfExpression ')'   (rule 28)

    '(' 	shift, and go to state 49



state 10

    input  ->  SCAN . '(' OPENSTRING stringAndAddresses ')'   (rule 34)

    '(' 	shift, and go to state 50



state 11

    factor  ->  ID .   (rule 48)
    assignment  ->  ID . assignementOperation arithmaticExpression   (rule 64)
    assignment  ->  ID . INC   (rule 65)
    assignment  ->  ID . DEC   (rule 66)

    ADD 	shift, and go to state 51
    SUB 	shift, and go to state 52
    MUL 	shift, and go to state 53
    DIV 	shift, and go to state 54
    INC 	shift, and go to state 55
    DEC 	shift, and go to state 56
    '=' 	shift, and go to state 57

    $default	reduce using rule 48 (factor)

    assignementOperation	go to state 58



state 12

    type  ->  INTEGER .   (rule 24)

    $default	reduce using rule 24 (type)



state 13

    type  ->  CHAR .   (rule 25)

    $default	reduce using rule 25 (type)



state 14

    type  ->  SINGLE .   (rule 26)

    $default	reduce using rule 26 (type)



state 15

    type  ->  DOUBLE .   (rule 27)

    $default	reduce using rule 27 (type)



state 16

    numberValue  ->  INTEGERVALUE .   (rule 88)

    $default	reduce using rule 88 (numberValue)



state 17

    value  ->  CHARVALUE .   (rule 86)

    $default	reduce using rule 86 (value)



state 18

    numberValue  ->  SINGLEVALUE .   (rule 89)

    $default	reduce using rule 89 (numberValue)



state 19

    numberValue  ->  DOUBLEVALUE .   (rule 90)

    $default	reduce using rule 90 (numberValue)



state 20

    factor  ->  '(' . arithmaticExpression ')'   (rule 46)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 60
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 21

    stmt  ->  '{' . code '}'   (rule 10)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    $default	reduce using rule 3 (code)

    code	go to state 61
    line	go to state 24
    stmt	go to state 25
    openStmt	go to state 26
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 33
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 40
    openForLoop	go to state 41
    openWhileLoop	go to state 42
    value	go to state 43
    numberValue	go to state 44



state 22

    factor  ->  '-' . factor   (rule 47)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    factor	go to state 62
    value	go to state 43
    numberValue	go to state 44



state 23

    start  ->  VOID MAIN '(' ')' '{' code . '}'   (rule 1)

    '}' 	shift, and go to state 63



state 24

    code  ->  line . code   (rule 2)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    $default	reduce using rule 3 (code)

    code	go to state 64
    line	go to state 24
    stmt	go to state 25
    openStmt	go to state 26
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 33
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 40
    openForLoop	go to state 41
    openWhileLoop	go to state 42
    value	go to state 43
    numberValue	go to state 44



state 25

    line  ->  stmt .   (rule 4)

    $default	reduce using rule 4 (line)



state 26

    line  ->  openStmt .   (rule 5)

    $default	reduce using rule 5 (line)



state 27

    stmt  ->  simpleStmt .   (rule 6)

    $default	reduce using rule 6 (stmt)



state 28

    simpleStmt  ->  declaration . ';'   (rule 14)

    ';' 	shift, and go to state 65



state 29

    declaration  ->  type . varList   (rule 19)

    ID  	shift, and go to state 66

    varList	go to state 67



state 30

    simpleStmt  ->  output . ';'   (rule 15)

    ';' 	shift, and go to state 68



state 31

    simpleStmt  ->  input . ';'   (rule 16)

    ';' 	shift, and go to state 69



state 32

    stmt  ->  ifStmt .   (rule 9)

    $default	reduce using rule 9 (stmt)



state 33

    openStmt  ->  openIfStmt .   (rule 11)

    $default	reduce using rule 11 (openStmt)



state 34

    simpleStmt  ->  arithmaticExpression . ';'   (rule 17)
    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)

    ';' 	shift, and go to state 70
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 35

    arithmaticExpression  ->  term .   (rule 42)
    term  ->  term . '*' factor   (rule 43)
    term  ->  term . '/' factor   (rule 44)

    '*' 	shift, and go to state 73
    '/' 	shift, and go to state 74

    $default	reduce using rule 42 (arithmaticExpression)



state 36

    term  ->  factor .   (rule 45)

    $default	reduce using rule 45 (term)



state 37

    simpleStmt  ->  assignment . ';'   (rule 18)

    ';' 	shift, and go to state 75



state 38

    stmt  ->  whileLoop .   (rule 7)

    $default	reduce using rule 7 (stmt)



state 39

    stmt  ->  forLoop .   (rule 8)

    $default	reduce using rule 8 (stmt)



state 40

    forLoop  ->  forExpr . stmt   (rule 73)
    openForLoop  ->  forExpr . openStmt   (rule 84)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 76
    openStmt	go to state 77
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 33
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 40
    openForLoop	go to state 41
    openWhileLoop	go to state 42
    value	go to state 43
    numberValue	go to state 44



state 41

    openStmt  ->  openForLoop .   (rule 13)

    $default	reduce using rule 13 (openStmt)



state 42

    openStmt  ->  openWhileLoop .   (rule 12)

    $default	reduce using rule 12 (openStmt)



state 43

    factor  ->  value .   (rule 49)

    $default	reduce using rule 49 (factor)



state 44

    value  ->  numberValue .   (rule 87)

    $default	reduce using rule 87 (value)



state 45

    ifStmt  ->  IF '(' . logicExpression ')' stmt ELSE stmt   (rule 37)
    openIfStmt  ->  IF '(' . logicExpression ')' stmt ELSE openIfStmt   (rule 38)
    openIfStmt  ->  IF '(' . logicExpression ')' line   (rule 39)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicExpression	go to state 81
    logicTerm	go to state 82
    logicFactor	go to state 83
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 46

    whileLoop  ->  WHILE '(' . logicExpression ')' stmt   (rule 72)
    openWhileLoop  ->  WHILE '(' . logicExpression ')' openStmt   (rule 85)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicExpression	go to state 86
    logicTerm	go to state 82
    logicFactor	go to state 83
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 47

    initExpr  ->  '(' . ID '=' arithmaticExpression ';'   (rule 75)

    ID  	shift, and go to state 87



state 48

    forExpr  ->  FOR initExpr . boundExpr stepExpr   (rule 74)

    ID  	shift, and go to state 88

    boundExpr	go to state 89



state 49

    output  ->  PRINT '(' . printfExpression ')'   (rule 28)

    OPENSTRING	shift, and go to state 90
    PURESTRING	shift, and go to state 91

    printfExpression	go to state 92



state 50

    input  ->  SCAN '(' . OPENSTRING stringAndAddresses ')'   (rule 34)

    OPENSTRING	shift, and go to state 93



state 51

    assignementOperation  ->  ADD .   (rule 68)

    $default	reduce using rule 68 (assignementOperation)



state 52

    assignementOperation  ->  SUB .   (rule 69)

    $default	reduce using rule 69 (assignementOperation)



state 53

    assignementOperation  ->  MUL .   (rule 70)

    $default	reduce using rule 70 (assignementOperation)



state 54

    assignementOperation  ->  DIV .   (rule 71)

    $default	reduce using rule 71 (assignementOperation)



state 55

    assignment  ->  ID INC .   (rule 65)

    $default	reduce using rule 65 (assignment)



state 56

    assignment  ->  ID DEC .   (rule 66)

    $default	reduce using rule 66 (assignment)



state 57

    assignementOperation  ->  '=' .   (rule 67)

    $default	reduce using rule 67 (assignementOperation)



state 58

    assignment  ->  ID assignementOperation . arithmaticExpression   (rule 64)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 94
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 59

    factor  ->  ID .   (rule 48)

    $default	reduce using rule 48 (factor)



state 60

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    factor  ->  '(' arithmaticExpression . ')'   (rule 46)

    ')' 	shift, and go to state 95
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 61

    stmt  ->  '{' code . '}'   (rule 10)

    '}' 	shift, and go to state 96



state 62

    factor  ->  '-' factor .   (rule 47)

    $default	reduce using rule 47 (factor)



state 63

    start  ->  VOID MAIN '(' ')' '{' code '}' .   (rule 1)

    $default	reduce using rule 1 (start)



state 64

    code  ->  line code .   (rule 2)

    $default	reduce using rule 2 (code)



state 65

    simpleStmt  ->  declaration ';' .   (rule 14)

    $default	reduce using rule 14 (simpleStmt)



state 66

    varList  ->  ID .   (rule 22)
    varList  ->  ID . '=' arithmaticExpression   (rule 23)

    '=' 	shift, and go to state 97

    $default	reduce using rule 22 (varList)



state 67

    declaration  ->  type varList .   (rule 19)
    varList  ->  varList . ',' ID   (rule 20)
    varList  ->  varList . ',' ID '=' arithmaticExpression   (rule 21)

    ',' 	shift, and go to state 98

    $default	reduce using rule 19 (declaration)



state 68

    simpleStmt  ->  output ';' .   (rule 15)

    $default	reduce using rule 15 (simpleStmt)



state 69

    simpleStmt  ->  input ';' .   (rule 16)

    $default	reduce using rule 16 (simpleStmt)



state 70

    simpleStmt  ->  arithmaticExpression ';' .   (rule 17)

    $default	reduce using rule 17 (simpleStmt)



state 71

    arithmaticExpression  ->  arithmaticExpression '+' . term   (rule 40)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    term	go to state 99
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 72

    arithmaticExpression  ->  arithmaticExpression '-' . term   (rule 41)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    term	go to state 100
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 73

    term  ->  term '*' . factor   (rule 43)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    factor	go to state 101
    value	go to state 43
    numberValue	go to state 44



state 74

    term  ->  term '/' . factor   (rule 44)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    factor	go to state 102
    value	go to state 43
    numberValue	go to state 44



state 75

    simpleStmt  ->  assignment ';' .   (rule 18)

    $default	reduce using rule 18 (simpleStmt)



state 76

    forLoop  ->  forExpr stmt .   (rule 73)

    $default	reduce using rule 73 (forLoop)



state 77

    openForLoop  ->  forExpr openStmt .   (rule 84)

    $default	reduce using rule 84 (openForLoop)



state 78

    factor  ->  '(' . arithmaticExpression ')'   (rule 46)
    notFactor  ->  '(' . logicExpression ')'   (rule 56)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 103
    term	go to state 35
    factor	go to state 36
    logicExpression	go to state 104
    logicTerm	go to state 82
    logicFactor	go to state 83
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 79

    logicFactor  ->  '!' . logicFactor   (rule 54)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicFactor	go to state 105
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 80

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    comparator  ->  arithmaticExpression . comparisonOperator arithmaticExpression   (rule 58)

    EQ  	shift, and go to state 106
    LE  	shift, and go to state 107
    GE  	shift, and go to state 108
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72
    '>' 	shift, and go to state 109
    '<' 	shift, and go to state 110

    comparisonOperator	go to state 111



state 81

    ifStmt  ->  IF '(' logicExpression . ')' stmt ELSE stmt   (rule 37)
    openIfStmt  ->  IF '(' logicExpression . ')' stmt ELSE openIfStmt   (rule 38)
    openIfStmt  ->  IF '(' logicExpression . ')' line   (rule 39)
    logicExpression  ->  logicExpression . OR logicTerm   (rule 50)

    OR  	shift, and go to state 112
    ')' 	shift, and go to state 113



state 82

    logicExpression  ->  logicTerm .   (rule 51)
    logicTerm  ->  logicTerm . AND logicFactor   (rule 52)

    AND 	shift, and go to state 114

    $default	reduce using rule 51 (logicExpression)



state 83

    logicTerm  ->  logicFactor .   (rule 53)

    $default	reduce using rule 53 (logicTerm)



state 84

    logicFactor  ->  notFactor .   (rule 55)

    $default	reduce using rule 55 (logicFactor)



state 85

    notFactor  ->  comparator .   (rule 57)

    $default	reduce using rule 57 (notFactor)



state 86

    logicExpression  ->  logicExpression . OR logicTerm   (rule 50)
    whileLoop  ->  WHILE '(' logicExpression . ')' stmt   (rule 72)
    openWhileLoop  ->  WHILE '(' logicExpression . ')' openStmt   (rule 85)

    OR  	shift, and go to state 112
    ')' 	shift, and go to state 115



state 87

    initExpr  ->  '(' ID . '=' arithmaticExpression ';'   (rule 75)

    '=' 	shift, and go to state 116



state 88

    boundExpr  ->  ID . LE arithmaticExpression ';'   (rule 76)
    boundExpr  ->  ID . GE arithmaticExpression ';'   (rule 77)
    boundExpr  ->  ID . '<' arithmaticExpression ';'   (rule 78)
    boundExpr  ->  ID . '>' arithmaticExpression ';'   (rule 79)

    LE  	shift, and go to state 117
    GE  	shift, and go to state 118
    '>' 	shift, and go to state 119
    '<' 	shift, and go to state 120



state 89

    forExpr  ->  FOR initExpr boundExpr . stepExpr   (rule 74)

    ID  	shift, and go to state 121

    stepExpr	go to state 122



state 90

    printfExpression  ->  OPENSTRING . stringAndArguments   (rule 30)

    INNERSTRING	shift, and go to state 123
    CLOSESTRING	shift, and go to state 124

    stringAndArguments	go to state 125
    innerString	go to state 126



state 91

    printfExpression  ->  PURESTRING .   (rule 29)

    $default	reduce using rule 29 (printfExpression)



state 92

    output  ->  PRINT '(' printfExpression . ')'   (rule 28)

    ')' 	shift, and go to state 127



state 93

    input  ->  SCAN '(' OPENSTRING . stringAndAddresses ')'   (rule 34)

    INNERSTRING	shift, and go to state 128
    CLOSESTRING	shift, and go to state 129

    stringAndAddresses	go to state 130



state 94

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    assignment  ->  ID assignementOperation arithmaticExpression .   (rule 64)

    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72

    $default	reduce using rule 64 (assignment)



state 95

    factor  ->  '(' arithmaticExpression ')' .   (rule 46)

    $default	reduce using rule 46 (factor)



state 96

    stmt  ->  '{' code '}' .   (rule 10)

    $default	reduce using rule 10 (stmt)



state 97

    varList  ->  ID '=' . arithmaticExpression   (rule 23)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 131
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 98

    varList  ->  varList ',' . ID   (rule 20)
    varList  ->  varList ',' . ID '=' arithmaticExpression   (rule 21)

    ID  	shift, and go to state 132



state 99

    arithmaticExpression  ->  arithmaticExpression '+' term .   (rule 40)
    term  ->  term . '*' factor   (rule 43)
    term  ->  term . '/' factor   (rule 44)

    '*' 	shift, and go to state 73
    '/' 	shift, and go to state 74

    $default	reduce using rule 40 (arithmaticExpression)



state 100

    arithmaticExpression  ->  arithmaticExpression '-' term .   (rule 41)
    term  ->  term . '*' factor   (rule 43)
    term  ->  term . '/' factor   (rule 44)

    '*' 	shift, and go to state 73
    '/' 	shift, and go to state 74

    $default	reduce using rule 41 (arithmaticExpression)



state 101

    term  ->  term '*' factor .   (rule 43)

    $default	reduce using rule 43 (term)



state 102

    term  ->  term '/' factor .   (rule 44)

    $default	reduce using rule 44 (term)



state 103

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    factor  ->  '(' arithmaticExpression . ')'   (rule 46)
    comparator  ->  arithmaticExpression . comparisonOperator arithmaticExpression   (rule 58)

    EQ  	shift, and go to state 106
    LE  	shift, and go to state 107
    GE  	shift, and go to state 108
    ')' 	shift, and go to state 95
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72
    '>' 	shift, and go to state 109
    '<' 	shift, and go to state 110

    comparisonOperator	go to state 111



state 104

    logicExpression  ->  logicExpression . OR logicTerm   (rule 50)
    notFactor  ->  '(' logicExpression . ')'   (rule 56)

    OR  	shift, and go to state 112
    ')' 	shift, and go to state 133



state 105

    logicFactor  ->  '!' logicFactor .   (rule 54)

    $default	reduce using rule 54 (logicFactor)



state 106

    comparisonOperator  ->  EQ .   (rule 59)

    $default	reduce using rule 59 (comparisonOperator)



state 107

    comparisonOperator  ->  LE .   (rule 62)

    $default	reduce using rule 62 (comparisonOperator)



state 108

    comparisonOperator  ->  GE .   (rule 63)

    $default	reduce using rule 63 (comparisonOperator)



state 109

    comparisonOperator  ->  '>' .   (rule 60)

    $default	reduce using rule 60 (comparisonOperator)



state 110

    comparisonOperator  ->  '<' .   (rule 61)

    $default	reduce using rule 61 (comparisonOperator)



state 111

    comparator  ->  arithmaticExpression comparisonOperator . arithmaticExpression   (rule 58)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 134
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 112

    logicExpression  ->  logicExpression OR . logicTerm   (rule 50)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicTerm	go to state 135
    logicFactor	go to state 83
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 113

    ifStmt  ->  IF '(' logicExpression ')' . stmt ELSE stmt   (rule 37)
    openIfStmt  ->  IF '(' logicExpression ')' . stmt ELSE openIfStmt   (rule 38)
    openIfStmt  ->  IF '(' logicExpression ')' . line   (rule 39)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    line	go to state 136
    stmt	go to state 137
    openStmt	go to state 26
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 33
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 40
    openForLoop	go to state 41
    openWhileLoop	go to state 42
    value	go to state 43
    numberValue	go to state 44



state 114

    logicTerm  ->  logicTerm AND . logicFactor   (rule 52)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicFactor	go to state 138
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 115

    whileLoop  ->  WHILE '(' logicExpression ')' . stmt   (rule 72)
    openWhileLoop  ->  WHILE '(' logicExpression ')' . openStmt   (rule 85)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 139
    openStmt	go to state 140
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 33
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 40
    openForLoop	go to state 41
    openWhileLoop	go to state 42
    value	go to state 43
    numberValue	go to state 44



state 116

    initExpr  ->  '(' ID '=' . arithmaticExpression ';'   (rule 75)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 141
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 117

    boundExpr  ->  ID LE . arithmaticExpression ';'   (rule 76)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 142
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 118

    boundExpr  ->  ID GE . arithmaticExpression ';'   (rule 77)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 143
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 119

    boundExpr  ->  ID '>' . arithmaticExpression ';'   (rule 79)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 144
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 120

    boundExpr  ->  ID '<' . arithmaticExpression ';'   (rule 78)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 145
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 121

    stepExpr  ->  ID . ADD arithmaticExpression ')'   (rule 80)
    stepExpr  ->  ID . SUB arithmaticExpression ')'   (rule 81)
    stepExpr  ->  ID . INC ')'   (rule 82)
    stepExpr  ->  ID . DEC ')'   (rule 83)

    ADD 	shift, and go to state 146
    SUB 	shift, and go to state 147
    INC 	shift, and go to state 148
    DEC 	shift, and go to state 149



state 122

    forExpr  ->  FOR initExpr boundExpr stepExpr .   (rule 74)

    $default	reduce using rule 74 (forExpr)



state 123

    innerString  ->  INNERSTRING .   (rule 33)

    $default	reduce using rule 33 (innerString)



state 124

    stringAndArguments  ->  CLOSESTRING . ',' arithmaticExpression   (rule 32)

    ',' 	shift, and go to state 150



state 125

    printfExpression  ->  OPENSTRING stringAndArguments .   (rule 30)

    $default	reduce using rule 30 (printfExpression)



state 126

    stringAndArguments  ->  innerString . stringAndArguments ',' arithmaticExpression   (rule 31)

    INNERSTRING	shift, and go to state 123
    CLOSESTRING	shift, and go to state 124

    stringAndArguments	go to state 151
    innerString	go to state 126



state 127

    output  ->  PRINT '(' printfExpression ')' .   (rule 28)

    $default	reduce using rule 28 (output)



state 128

    stringAndAddresses  ->  INNERSTRING . stringAndAddresses ',' '&' ID   (rule 35)

    INNERSTRING	shift, and go to state 128
    CLOSESTRING	shift, and go to state 129

    stringAndAddresses	go to state 152



state 129

    stringAndAddresses  ->  CLOSESTRING . ',' '&' ID   (rule 36)

    ',' 	shift, and go to state 153



state 130

    input  ->  SCAN '(' OPENSTRING stringAndAddresses . ')'   (rule 34)

    ')' 	shift, and go to state 154



state 131

    varList  ->  ID '=' arithmaticExpression .   (rule 23)
    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)

    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72

    $default	reduce using rule 23 (varList)



state 132

    varList  ->  varList ',' ID .   (rule 20)
    varList  ->  varList ',' ID . '=' arithmaticExpression   (rule 21)

    '=' 	shift, and go to state 155

    $default	reduce using rule 20 (varList)



state 133

    notFactor  ->  '(' logicExpression ')' .   (rule 56)

    $default	reduce using rule 56 (notFactor)



state 134

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    comparator  ->  arithmaticExpression comparisonOperator arithmaticExpression .   (rule 58)

    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72

    $default	reduce using rule 58 (comparator)



state 135

    logicExpression  ->  logicExpression OR logicTerm .   (rule 50)
    logicTerm  ->  logicTerm . AND logicFactor   (rule 52)

    AND 	shift, and go to state 114

    $default	reduce using rule 50 (logicExpression)



state 136

    openIfStmt  ->  IF '(' logicExpression ')' line .   (rule 39)

    $default	reduce using rule 39 (openIfStmt)



state 137

    line  ->  stmt .   (rule 4)
    ifStmt  ->  IF '(' logicExpression ')' stmt . ELSE stmt   (rule 37)
    openIfStmt  ->  IF '(' logicExpression ')' stmt . ELSE openIfStmt   (rule 38)

    ELSE	shift, and go to state 156

    $default	reduce using rule 4 (line)



state 138

    logicTerm  ->  logicTerm AND logicFactor .   (rule 52)

    $default	reduce using rule 52 (logicTerm)



state 139

    whileLoop  ->  WHILE '(' logicExpression ')' stmt .   (rule 72)

    $default	reduce using rule 72 (whileLoop)



state 140

    openWhileLoop  ->  WHILE '(' logicExpression ')' openStmt .   (rule 85)

    $default	reduce using rule 85 (openWhileLoop)



state 141

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    initExpr  ->  '(' ID '=' arithmaticExpression . ';'   (rule 75)

    ';' 	shift, and go to state 157
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 142

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    boundExpr  ->  ID LE arithmaticExpression . ';'   (rule 76)

    ';' 	shift, and go to state 158
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 143

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    boundExpr  ->  ID GE arithmaticExpression . ';'   (rule 77)

    ';' 	shift, and go to state 159
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 144

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    boundExpr  ->  ID '>' arithmaticExpression . ';'   (rule 79)

    ';' 	shift, and go to state 160
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 145

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    boundExpr  ->  ID '<' arithmaticExpression . ';'   (rule 78)

    ';' 	shift, and go to state 161
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 146

    stepExpr  ->  ID ADD . arithmaticExpression ')'   (rule 80)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 162
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 147

    stepExpr  ->  ID SUB . arithmaticExpression ')'   (rule 81)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 163
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 148

    stepExpr  ->  ID INC . ')'   (rule 82)

    ')' 	shift, and go to state 164



state 149

    stepExpr  ->  ID DEC . ')'   (rule 83)

    ')' 	shift, and go to state 165



state 150

    stringAndArguments  ->  CLOSESTRING ',' . arithmaticExpression   (rule 32)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 166
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 151

    stringAndArguments  ->  innerString stringAndArguments . ',' arithmaticExpression   (rule 31)

    ',' 	shift, and go to state 167



state 152

    stringAndAddresses  ->  INNERSTRING stringAndAddresses . ',' '&' ID   (rule 35)

    ',' 	shift, and go to state 168



state 153

    stringAndAddresses  ->  CLOSESTRING ',' . '&' ID   (rule 36)

    '&' 	shift, and go to state 169



state 154

    input  ->  SCAN '(' OPENSTRING stringAndAddresses ')' .   (rule 34)

    $default	reduce using rule 34 (input)



state 155

    varList  ->  varList ',' ID '=' . arithmaticExpression   (rule 21)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 170
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 156

    ifStmt  ->  IF '(' logicExpression ')' stmt ELSE . stmt   (rule 37)
    openIfStmt  ->  IF '(' logicExpression ')' stmt ELSE . openIfStmt   (rule 38)

    IF  	shift, and go to state 6
    WHILE	shift, and go to state 171
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 172
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    openIfStmt	go to state 173
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 174
    value	go to state 43
    numberValue	go to state 44



state 157

    initExpr  ->  '(' ID '=' arithmaticExpression ';' .   (rule 75)

    $default	reduce using rule 75 (initExpr)



state 158

    boundExpr  ->  ID LE arithmaticExpression ';' .   (rule 76)

    $default	reduce using rule 76 (boundExpr)



state 159

    boundExpr  ->  ID GE arithmaticExpression ';' .   (rule 77)

    $default	reduce using rule 77 (boundExpr)



state 160

    boundExpr  ->  ID '>' arithmaticExpression ';' .   (rule 79)

    $default	reduce using rule 79 (boundExpr)



state 161

    boundExpr  ->  ID '<' arithmaticExpression ';' .   (rule 78)

    $default	reduce using rule 78 (boundExpr)



state 162

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    stepExpr  ->  ID ADD arithmaticExpression . ')'   (rule 80)

    ')' 	shift, and go to state 175
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 163

    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)
    stepExpr  ->  ID SUB arithmaticExpression . ')'   (rule 81)

    ')' 	shift, and go to state 176
    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72



state 164

    stepExpr  ->  ID INC ')' .   (rule 82)

    $default	reduce using rule 82 (stepExpr)



state 165

    stepExpr  ->  ID DEC ')' .   (rule 83)

    $default	reduce using rule 83 (stepExpr)



state 166

    stringAndArguments  ->  CLOSESTRING ',' arithmaticExpression .   (rule 32)
    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)

    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72

    $default	reduce using rule 32 (stringAndArguments)



state 167

    stringAndArguments  ->  innerString stringAndArguments ',' . arithmaticExpression   (rule 31)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '-' 	shift, and go to state 22

    arithmaticExpression	go to state 177
    term	go to state 35
    factor	go to state 36
    value	go to state 43
    numberValue	go to state 44



state 168

    stringAndAddresses  ->  INNERSTRING stringAndAddresses ',' . '&' ID   (rule 35)

    '&' 	shift, and go to state 178



state 169

    stringAndAddresses  ->  CLOSESTRING ',' '&' . ID   (rule 36)

    ID  	shift, and go to state 179



state 170

    varList  ->  varList ',' ID '=' arithmaticExpression .   (rule 21)
    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)

    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72

    $default	reduce using rule 21 (varList)



state 171

    whileLoop  ->  WHILE . '(' logicExpression ')' stmt   (rule 72)

    '(' 	shift, and go to state 180



state 172

    ifStmt  ->  IF '(' logicExpression ')' stmt ELSE stmt .   (rule 37)

    $default	reduce using rule 37 (ifStmt)



state 173

    openIfStmt  ->  IF '(' logicExpression ')' stmt ELSE openIfStmt .   (rule 38)

    $default	reduce using rule 38 (openIfStmt)



state 174

    forLoop  ->  forExpr . stmt   (rule 73)

    IF  	shift, and go to state 181
    WHILE	shift, and go to state 171
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 76
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 174
    value	go to state 43
    numberValue	go to state 44



state 175

    stepExpr  ->  ID ADD arithmaticExpression ')' .   (rule 80)

    $default	reduce using rule 80 (stepExpr)



state 176

    stepExpr  ->  ID SUB arithmaticExpression ')' .   (rule 81)

    $default	reduce using rule 81 (stepExpr)



state 177

    stringAndArguments  ->  innerString stringAndArguments ',' arithmaticExpression .   (rule 31)
    arithmaticExpression  ->  arithmaticExpression . '+' term   (rule 40)
    arithmaticExpression  ->  arithmaticExpression . '-' term   (rule 41)

    '+' 	shift, and go to state 71
    '-' 	shift, and go to state 72

    $default	reduce using rule 31 (stringAndArguments)



state 178

    stringAndAddresses  ->  INNERSTRING stringAndAddresses ',' '&' . ID   (rule 35)

    ID  	shift, and go to state 182



state 179

    stringAndAddresses  ->  CLOSESTRING ',' '&' ID .   (rule 36)

    $default	reduce using rule 36 (stringAndAddresses)



state 180

    whileLoop  ->  WHILE '(' . logicExpression ')' stmt   (rule 72)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicExpression	go to state 183
    logicTerm	go to state 82
    logicFactor	go to state 83
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 181

    ifStmt  ->  IF . '(' logicExpression ')' stmt ELSE stmt   (rule 37)

    '(' 	shift, and go to state 184



state 182

    stringAndAddresses  ->  INNERSTRING stringAndAddresses ',' '&' ID .   (rule 35)

    $default	reduce using rule 35 (stringAndAddresses)



state 183

    logicExpression  ->  logicExpression . OR logicTerm   (rule 50)
    whileLoop  ->  WHILE '(' logicExpression . ')' stmt   (rule 72)

    OR  	shift, and go to state 112
    ')' 	shift, and go to state 185



state 184

    ifStmt  ->  IF '(' . logicExpression ')' stmt ELSE stmt   (rule 37)

    ID  	shift, and go to state 59
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 78
    '-' 	shift, and go to state 22
    '!' 	shift, and go to state 79

    arithmaticExpression	go to state 80
    term	go to state 35
    factor	go to state 36
    logicExpression	go to state 186
    logicTerm	go to state 82
    logicFactor	go to state 83
    notFactor	go to state 84
    comparator	go to state 85
    value	go to state 43
    numberValue	go to state 44



state 185

    whileLoop  ->  WHILE '(' logicExpression ')' . stmt   (rule 72)

    IF  	shift, and go to state 181
    WHILE	shift, and go to state 171
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 139
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 174
    value	go to state 43
    numberValue	go to state 44



state 186

    ifStmt  ->  IF '(' logicExpression . ')' stmt ELSE stmt   (rule 37)
    logicExpression  ->  logicExpression . OR logicTerm   (rule 50)

    OR  	shift, and go to state 112
    ')' 	shift, and go to state 187



state 187

    ifStmt  ->  IF '(' logicExpression ')' . stmt ELSE stmt   (rule 37)

    IF  	shift, and go to state 181
    WHILE	shift, and go to state 171
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 188
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 174
    value	go to state 43
    numberValue	go to state 44



state 188

    ifStmt  ->  IF '(' logicExpression ')' stmt . ELSE stmt   (rule 37)

    ELSE	shift, and go to state 189



state 189

    ifStmt  ->  IF '(' logicExpression ')' stmt ELSE . stmt   (rule 37)

    IF  	shift, and go to state 181
    WHILE	shift, and go to state 171
    FOR 	shift, and go to state 8
    PRINT	shift, and go to state 9
    SCAN	shift, and go to state 10
    ID  	shift, and go to state 11
    INTEGER	shift, and go to state 12
    CHAR	shift, and go to state 13
    SINGLE	shift, and go to state 14
    DOUBLE	shift, and go to state 15
    INTEGERVALUE	shift, and go to state 16
    CHARVALUE	shift, and go to state 17
    SINGLEVALUE	shift, and go to state 18
    DOUBLEVALUE	shift, and go to state 19
    '(' 	shift, and go to state 20
    '{' 	shift, and go to state 21
    '-' 	shift, and go to state 22

    stmt	go to state 172
    simpleStmt	go to state 27
    declaration	go to state 28
    type	go to state 29
    output	go to state 30
    input	go to state 31
    ifStmt	go to state 32
    arithmaticExpression	go to state 34
    term	go to state 35
    factor	go to state 36
    assignment	go to state 37
    whileLoop	go to state 38
    forLoop	go to state 39
    forExpr	go to state 174
    value	go to state 43
    numberValue	go to state 44



state 190

    $   	go to state 191



state 191

    $   	go to state 192



state 192

    $default	accept
